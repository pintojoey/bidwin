package cz.zcu.kiv.server.sqlite;

import cz.zcu.kiv.server.sqlite.Model.Module;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.sql.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Modules {
    private static Log logger = LogFactory.getLog(Modules.class);

    public static Module addModule(Module module) throws SQLException {
        if(!jarExists(module.getJarName())){
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            try {
                connection = SQLiteDB.getInstance().connect();
                preparedStatement =
                        connection.prepareStatement("INSERT into modules (jarName, packageName, publicJar, author, lastUpdate) VALUES (?,?,?,?,?);",
                                Statement.RETURN_GENERATED_KEYS);

                preparedStatement.setString(1, module.getJarName());
                preparedStatement.setString(2, module.getPackageName());
                preparedStatement.setBoolean(3, module.isPublicJar());
                preparedStatement.setString(4, module.getAuthor());
                Timestamp currentTimestamp = new Timestamp(System.currentTimeMillis());
                preparedStatement.setTimestamp(5,currentTimestamp);

                preparedStatement.executeUpdate();

                ResultSet tableKeys = preparedStatement.getGeneratedKeys();
                tableKeys.next();
                long autoGeneratedID = tableKeys.getLong(1);
                module.setId(autoGeneratedID);
                module.setLastUpdate(new Date(currentTimestamp.getTime()));
                return module;
            }
            finally {
                if(preparedStatement!=null) {
                    try {
                        preparedStatement.close();
                    } catch (SQLException e1) {
                        logger.error(e1);
                    }
                }
                if(connection!=null){
                    try {
                        connection.close();
                    } catch (SQLException e1) {
                        logger.error(e1);
                    }
                }
            }

        }
        else
            throw new SQLException(module.getJarName()+ " already exists");
    }

    public static Module getModuleByJar(String jarName ) throws SQLException{
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        try {
            connection = SQLiteDB.getInstance().connect();
            preparedStatement =
                    connection.prepareStatement("SELECT * FROM modules WHERE jarName=?;" );

            preparedStatement.setString(1, jarName);

            ResultSet resultSet = preparedStatement.executeQuery();
            Module module = null;
            if(resultSet.next()){
                module=new Module();
                module.setJarName(resultSet.getString("jarName"));
                module.setPackageName(resultSet.getString("packageName"));
                module.setPublicJar(resultSet.getBoolean("publicJar"));
                module.setAuthor(resultSet.getString("author"));
                module.setId(resultSet.getLong("id"));
            }
            return module;
        }
        finally {
            if(preparedStatement!=null) {
                try {
                    preparedStatement.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }
            if(connection!=null){
                try {
                    connection.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }

        }
    }

    public static boolean jarExists(String jarName ) throws SQLException{
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        try {
            connection = SQLiteDB.getInstance().connect();
            preparedStatement =
                    connection.prepareStatement("SELECT * FROM modules WHERE jarName=?;" );

            preparedStatement.setString(1, jarName);
            ResultSet resultSet = preparedStatement.executeQuery();
            if(resultSet.next()){
                return true;
            }
            else return false;
        }
        finally {
            if(preparedStatement!=null) {
                try {
                    preparedStatement.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }
            if(connection!=null){
                try {
                    connection.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }

        }
    }



    public static Module updateModule(Module module){
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        try {
            connection = SQLiteDB.getInstance().connect();
            preparedStatement =
                    connection.prepareStatement("UPDATE modules SET publicJar=?,author=?,lastUpdate=?  WHERE id=?;" );

            preparedStatement.setBoolean(1, module.isPublicJar());
            preparedStatement.setString(2, module.getAuthor());
            Timestamp currentTimestamp = new Timestamp(System.currentTimeMillis());
            module.setLastUpdate(currentTimestamp);
            preparedStatement.setTimestamp(3,currentTimestamp);
            preparedStatement.setLong(4, module.getId());


            preparedStatement.executeUpdate();
            return module;
        }
        catch (SQLException e){
            logger.error(e);
            return null;
        }
        finally {
            if(preparedStatement!=null) {
                try {
                    preparedStatement.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }
            if(connection!=null){
                try {
                    connection.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }

        }
    }

    public static List<Module> getModulesForUser(String userEmail ){
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        List<Module>modules=new ArrayList<>();
        try {
            connection = SQLiteDB.getInstance().connect();
            preparedStatement =
                    connection.prepareStatement("SELECT * FROM modules WHERE publicJar=true OR author=?;" );

            preparedStatement.setString(1, userEmail);

            ResultSet resultSet = preparedStatement.executeQuery();

            while(resultSet.next()){
                Module module=new Module();
                module.setJarName(resultSet.getString("jarName"));
                module.setPackageName(resultSet.getString("packageName"));
                module.setPublicJar(resultSet.getBoolean("publicJar"));
                module.setAuthor(resultSet.getString("author"));
                module.setId(resultSet.getLong("id"));
                module.setLastUpdate(new Date(resultSet.getLong("lastUpdate")));
                modules.add(module);
            }
            return modules;

        }
        catch (SQLException e){
            logger.error(e);
            return modules;
        }
        finally {
            if(preparedStatement!=null) {
                try {
                    preparedStatement.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }
            if(connection!=null){
                try {
                    connection.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }

        }

    }

    public static void removeModule(long id) {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        try {
            connection = SQLiteDB.getInstance().connect();
            preparedStatement =
                    connection.prepareStatement("DELETE from modules  WHERE id=?;" );

            preparedStatement.setLong(1, id);

            preparedStatement.executeUpdate();
        }
        catch (SQLException e){
            logger.error(e);
        }
        finally {
            if(preparedStatement!=null) {
                try {
                    preparedStatement.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }
            if(connection!=null){
                try {
                    connection.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }

        }
    }
}
