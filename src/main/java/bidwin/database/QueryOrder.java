package bidwin.database;

import bidwin.models.Bid;
import bidwin.models.Order;
import bidwin.models.Product;
import cz.zcu.kiv.server.sqlite.UserAlreadyExistsException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class QueryOrder {
    private static Log logger = LogFactory.getLog(QueryOrder.class);

    public static Order addOrder(Order order) throws SQLException, UserAlreadyExistsException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        try {
            connection = mysqlDB.getInstance().connect();
            preparedStatement =
                    connection.prepareStatement("INSERT INTO `order` (`product_id`, `market_id`, `buynow`, `startbid`, `minrating`) VALUES (?, ?, ?, ?, ?);",
                            Statement.RETURN_GENERATED_KEYS);

            preparedStatement.setLong(1, order.getProductId());
            preparedStatement.setLong(2, order.getMarketId());
            preparedStatement.setDouble(3, order.getBuyNow());
            preparedStatement.setDouble(4, order.getStartBid());
            preparedStatement.setDouble(5, order.getMinRating());
            preparedStatement.executeUpdate();

            ResultSet tableKeys = preparedStatement.getGeneratedKeys();
            tableKeys.next();
            long autoGeneratedID = tableKeys.getLong(1);
            order.setId(autoGeneratedID);
            return order;
        } finally {
            if (preparedStatement != null) {
                try {
                    preparedStatement.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }
        }

    }

    public static List<Order> getAllOrders() {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        List<Order> orders = new ArrayList<>();
        try {
            connection = mysqlDB.getInstance().connect();
            preparedStatement =
                    connection.prepareStatement("SELECT * FROM order;");


            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                Order order = new Order();
                order.setProductId(resultSet.getLong("product_id"));
                order.setMarketId(resultSet.getLong("market_id"));
                order.setBuyNow(resultSet.getDouble("buynow"));
                order.setStartBid(resultSet.getDouble("startbid"));
                order.setMinRating(resultSet.getInt("minrating"));
                orders.add(order);
            }
            return orders;

        } catch (SQLException e) {
            logger.error(e);
            return orders;
        } finally {
            if (preparedStatement != null) {
                try {
                    preparedStatement.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }

        }

    }


    public static void main(String[] args) {
        Order order = new Order();
        order.setProductId(123);
        order.setMarketId(456);
        order.setBuyNow(400);
        order.setStartBid(350);
        order.setMinRating(2);

        try {
            addOrder(order);
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (UserAlreadyExistsException e) {
            e.printStackTrace();
        }

    }
}