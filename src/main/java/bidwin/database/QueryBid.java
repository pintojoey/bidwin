package bidwin.database;

import bidwin.models.Bid;
import bidwin.models.Product;
import cz.zcu.kiv.server.sqlite.UserAlreadyExistsException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class QueryBid {
    private static Log logger = LogFactory.getLog(QueryProducts.class);

    public static Bid addBid(Bid bid) throws SQLException, UserAlreadyExistsException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        try {
            connection = mysqlDB.getInstance().connect();
            preparedStatement =
                    connection.prepareStatement("INSERT INTO `bid` (`order_id`, `inventory_id`, `price`) VALUES (?, ?, ?);",
                            Statement.RETURN_GENERATED_KEYS);

            preparedStatement.setLong(1, bid.getOrderId());
            preparedStatement.setLong(2, bid.getInventoryId());
            preparedStatement.setDouble(3, bid.getPrice());
            preparedStatement.executeUpdate();

            ResultSet tableKeys = preparedStatement.getGeneratedKeys();
            tableKeys.next();
            long autoGeneratedID = tableKeys.getLong(1);
            bid.setId(autoGeneratedID);
            return bid;
        } finally {
            if (preparedStatement != null) {
                try {
                    preparedStatement.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }
        }

    }

    public static List<Bid> getAllBids() {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        List<Bid> bids = new ArrayList<>();
        try {
            connection = mysqlDB.getInstance().connect();
            preparedStatement =
                    connection.prepareStatement("SELECT * FROM bid;");


            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                Bid bid = new Bid();
                bid.setOrderId(resultSet.getLong("order_id"));
                bid.setInventoryId(resultSet.getLong("inventory_id"));
                bid.setPrice(resultSet.getDouble("price"));
                bids.add(bid);
            }
            return bids;

        } catch (SQLException e) {
            logger.error(e);
            return bids;
        } finally {
            if (preparedStatement != null) {
                try {
                    preparedStatement.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e1) {
                    logger.error(e1);
                }
            }

        }

    }


    public static void main(String[] args) {
        Bid bid = new Bid();
        bid.setOrderId(123);
        bid.setInventoryId(456);
        bid.setPrice(400);
        try {
            addBid(bid);
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (UserAlreadyExistsException e) {
            e.printStackTrace();
        }

    }
}